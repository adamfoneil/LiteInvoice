@implements IDisposable

@inject NavigationManager NavigationManager

<div class="d-flex align-items-center justify-content-between mt-3">
	<div class="d-flex align-items-center">
        <div>menu items</div>
	</div>
	<div class="d-flex align-items-center">
        <AuthorizeView>
            <Authorized>
                <NavLink class="nav-link" href="Account/Manage">
                    <i class="bi bi-person-circle"></i> @context.User.Identity?.Name					
                </NavLink>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link" title="Logout">
                            <i class="bi bi-box-arrow-right"></i>
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">                        
                        <i class="bi bi-person-fill-add"></i> Register						
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <i class="bi bi-box-arrow-in-right"></i> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
	</div>
</div>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

