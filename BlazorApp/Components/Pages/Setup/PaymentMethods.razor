@inject IDbContextFactory<ApplicationDbContext> DbFactory
@page "/Setup/PaymentMethods"

<h3>Payment Methods</h3>

<EditForm Model="newPaymentMethod">
	<RadzenDropDown @bind-Value="newPaymentMethod.BusinessId"
		Data="businesses"
		TextProperty="Name" ValueProperty="Id" 
		Placeholder="business"/>

	<RadzenDropDown @bind-Value="newPaymentMethod.Type"
		Data="Enum.GetValues<PaymentMethodType>()"
		Placeholder="Type" />

	<RadzenTextBox @bind-Value="newPaymentMethod.Name" Placeholder="Name" MaxLength="50" />

	<RadzenTextBox @bind-Value="newPaymentMethod.StaticLink" Placeholder="Static link" MaxLength="100" Visible="newPaymentMethod.Type == PaymentMethodType.StaticLink" />

	<RadzenButton Text="Add" Click="AddPaymentMethod" />
</EditForm>

@if (paymentMethods is null) return;

<RadzenDataGrid TItem="PaymentMethod" Data="paymentMethods">
	<Columns>
		<RadzenDataGridColumn TItem="PaymentMethod" Property="Name" Title="Name" />
		<RadzenDataGridColumn TItem="PaymentMethod" Property="Type" Title="Type" />
	</Columns>
</RadzenDataGrid>

@code {
	private LiteInvoice.Database.Business[] businesses = [];
	private PaymentMethod[] paymentMethods = [];
	private PaymentMethod newPaymentMethod = new();	
	private int userId;

	[CascadingParameter]
	public ApplicationUser? CurrentUser { get; set; }

	private async Task Refresh()
	{
		using var db = DbFactory.CreateDbContext();

		paymentMethods = await db
			.PaymentMethods
			.Include(pm => pm.Business)
			.Where(pm => pm.Business.UserId == userId)
			.ToArrayAsync();
	}

	protected override async Task OnInitializedAsync()
	{
		userId = CurrentUser?.UserId ?? 0;

		using var db = DbFactory.CreateDbContext();
		businesses = await db.Businesses.Where(b => b.UserId == userId).ToArrayAsync();

		await Refresh();
	}

	private async Task AddPaymentMethod()
	{
		using var db = DbFactory.CreateDbContext();
		db.PaymentMethods.Add(newPaymentMethod);
		await db.SaveChangesAsync();
		newPaymentMethod = new();
		await Refresh();
	}
}
