@page "/Setup/Customers"
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<h3>Customers</h3>
<RadzenDropDown @bind-Value="selectedBusinessId" Data="businesses" ValueProperty="Id" TextProperty="Name" Change="SelectBusiness" Placeholder="business" />

<GridInsertButton TItem="Customer" Grid="grid" OnCreateItem="() => new() { BusinessId = selectedBusinessId }" />
<RadzenDataGrid TItem="Customer" Data="customers" @ref="grid" RowCreate="SaveCustomer" RowUpdate="SaveCustomer">
	<Columns>
		<RadzenDataGridColumn TItem="Customer" Title="Name" Property="Name">
			<EditTemplate>
				<RadzenTextBox @bind-Value="context.Name" Placeholder="Name" MaxLength="50" />
			</EditTemplate>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Customer" Title="Contact Name" Property="Contact">
			<EditTemplate>
				<RadzenTextBox @bind-Value="context.Contact" Placeholder="Contact name" MaxLength="50" />
			</EditTemplate>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Customer" Title="Email" Property="Email">
			<Template>
				<span style="white-space:normal">@context.Email</span>
			</Template>
			<EditTemplate>
				<RadzenTextBox @bind-Value="context.Email" Placeholder="Email" MaxLength="50" />
			</EditTemplate>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Customer" Title="Phone" Property="Phone">
			<EditTemplate>
				<RadzenTextBox @bind-Value="context.Phone" Placeholder="Phone" MaxLength="50" />
			</EditTemplate>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Customer" Title="Rate" Property="HourlyRate" FormatString="{0:c2}">
			<EditTemplate>
				<RadzenNumeric @bind-Value="context.HourlyRate" Placeholder="Hourly Rate" />
			</EditTemplate>
		</RadzenDataGridColumn>
		<GridControls TItem="Customer" Grid="grid" DeleteRow="DeleteCustomer" />
	</Columns>
</RadzenDataGrid>


@code {
	private int selectedBusinessId;
	private Business[] businesses = [];
	private Customer[] customers = [];
	private RadzenDataGrid<Customer>? grid;

	[CascadingParameter] public ApplicationUser? CurrentUser { get; set; }

	protected override async Task OnInitializedAsync()
	{
		using var db = DbFactory.CreateDbContext();

		var userId = CurrentUser?.UserId ?? 0;

		businesses = await db
			.Businesses
			.Where(b => b.UserId == userId)
			.ToArrayAsync();

		if (businesses.Any()) 
		{
			selectedBusinessId = businesses.First().Id;
			await SelectBusiness();
		}
	}

	private async Task SelectBusiness()
	{
		using var db = DbFactory.CreateDbContext();

		customers = await db
				.Customers
				.Where(c => c.BusinessId == selectedBusinessId)
				.ToArrayAsync();
	}

	private async Task SaveCustomer(Customer row)
	{
		using var db = DbFactory.CreateDbContext();
		db.Customers.Update(row);
		await db.SaveChangesAsync();
	}

	private async Task DeleteCustomer(Customer row)
	{
		using var db = DbFactory.CreateDbContext();
		db.Customers.Remove(row);
		await db.SaveChangesAsync();
	}
}
