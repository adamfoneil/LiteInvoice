@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject Hashids Hashids

<RadzenDataGrid TItem="Invoice" Data="invoices">
	<Columns>
		<RadzenDataGridColumn TItem="Invoice" Property="Number" Title="Invoice #" Width="140px" />
		<RadzenDataGridColumn TItem="Invoice" Title="Customer">
			<Template>
				@context.Project.Customer.Name
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Invoice" Title="Amount" Property="AmountDue" FormatString="{0:c2}" Width="120px" />
		<RadzenDataGridColumn TItem="Invoice" Title="Balance" Property="BalanceDue" FormatString="{0:c2}" Width="120px" />
		<RadzenDataGridColumn TItem="Invoice" Title="Date" Property="Date" FormatString="{0:M/d/yy}" Width="120px" />
		<RadzenDataGridColumn TItem="Invoice">
			<Template>
				<a href="/Invoice/@context.HashId" target="_blank" class="me-3">View</a>
				<RadzenButton Text="Delete" Click="() => Delete(context)" class="me-3" />
				<RadzenButton Text="Payment..." Click="() => EnterPayment(context)" />
			</Template>
		</RadzenDataGridColumn>
	</Columns>
	<Template>
		<ul>
			@foreach (var pmt in context.Payments)
			{
				<li class="d-flex align-items-center">
					<div class="me-3">@pmt.Amount.ToString("c2")</div>
					<RadzenButton Click="() => DeletePayment(pmt)" Text="Delete" />
				</li>
			}
		</ul>		
	</Template>
</RadzenDataGrid>

@code {
	private int userId;
	private Invoice[] invoices = [];
	private Payment payment = new();

	[CascadingParameter] public ApplicationUser? CurrentUser { get; set; }

	protected override async Task OnInitializedAsync()
	{
		userId = CurrentUser?.UserId ?? 0;
		await Refresh();
	}

	private async Task Refresh()
	{		
		using var db = DbFactory.CreateDbContext();
		invoices = await db.Invoices
			.Include(inv => inv.Project)
			.ThenInclude(p => p.Customer)
			.ThenInclude(c => c.Business)
			.Include(inv => inv.Payments)
			.Where(inv => 
				inv.Project.Customer.Business.UserId == userId &&
				inv.Payments.Sum(p => p.Amount) < inv.AmountDue)
			.AsSplitQuery()			
			.ToArrayAsync();		

		foreach (var row in invoices) row.BalanceDue = row.AmountDue - row.Payments.Sum(p => p.Amount);
	}

	private async Task Delete(Invoice invoice)
	{
		var ok = await Dialogs.Confirm("This will delete the invoice");
		if (!ok.HasValue || !ok.Value) return;	

		using var db = DbFactory.CreateDbContext();
		await db.DeleteInvoiceAsync(invoice.Id);
		await Refresh();
	}

	private async Task EnterPayment(Invoice invoice)
	{		
		var response = await Dialogs.OpenAsync("Enter Payment", (ds) =>
			@<div>
				<div class="edit-form">
					<label>Invoice #:</label>
					<label>@invoice.Number - @invoice.Project.Customer.Name</label>

					<label>Balance Due:</label>
					<label>@invoice.BalanceDue.ToString("c2")</label>

					<label>Amount:</label>
					<RadzenNumeric @bind-Value="payment.Amount" Style="width:120px" />

					<label>Description:</label>
					<RadzenTextBox @bind-Value="payment.Data" Style="width:200px" />
				</div>

				<div class="d-flex justify-content-end mt-3">
					<RadzenButton Text="OK" Click="() => Dialogs.Close(true)" class="me-2" />
					<RadzenButton Text="Cancel" Click="() => Dialogs.Close(false)" ButtonStyle="ButtonStyle.Secondary" />
				</div>				
			</div>
	);

		if (response is null) return;		

		using var db = DbFactory.CreateDbContext();
		db.CurrentUser = CurrentUser?.UserName;

		payment.InvoiceId = invoice.Id;
		payment.IsManual = true;
		db.Payments.Add(payment);
		await db.SaveChangesAsync();
		await Refresh();
		payment = new();
	}

	private async Task DeletePayment(Payment payment)
	{
		using var db = DbFactory.CreateDbContext();
		db.Payments.Remove(payment);
		await db.SaveChangesAsync();
		await Refresh();
	}
}
