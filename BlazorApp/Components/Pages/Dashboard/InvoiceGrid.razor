@inject IDbContextFactory<ApplicationDbContext> DbFactory

<RadzenDataGrid TItem="Invoice" Data="Items">
	<Columns>
		<RadzenDataGridColumn TItem="Invoice" Property="Number" Title="Invoice #" Width="140px" />
		<RadzenDataGridColumn TItem="Invoice" Title="Customer">
			<Template>
				@context.Project.Customer.Name
			</Template>
		</RadzenDataGridColumn>
		<RadzenDataGridColumn TItem="Invoice" Title="Amount" Property="AmountDue" FormatString="{0:c2}" Width="120px" />
		<RadzenDataGridColumn TItem="Invoice" Title="Balance" Property="BalanceDue" FormatString="{0:c2}" Width="120px" />
		<RadzenDataGridColumn TItem="Invoice" Title="Date" Property="Date" FormatString="{0:M/d/yy}" Width="120px" />
		<RadzenDataGridColumn TItem="Invoice">
			<Template>
				<a href="/Invoice/@context.HashId" target="_blank" class="me-3">View</a>
				<RadzenButton Text="Payment..." Click="() => EnterPayment(context)" class="me-3" Visible="AllowPayments" />
				<RadzenButton Icon="delete" Click="() => Delete(context)" class="me-3" ButtonStyle="ButtonStyle.Danger" Visible="AllowDelete" />
			</Template>
		</RadzenDataGridColumn>
	</Columns>
	<Template>
		<Payments Items="@context.Payments" PaymentDeleted="DataChanged" />
	</Template>
</RadzenDataGrid>

@code {
	private Payment payment = new();
	private ApplicationUser user = new();

	[Parameter] public IEnumerable<Invoice> Items { get; set; } = [];
	[Parameter] public EventCallback DataChanged { get; set; }
	[Parameter] public bool AllowPayments { get; set; }
	[Parameter] public bool AllowDelete { get; set; }	

	protected override async Task OnInitializedAsync()
	{
		user = await CurrentUser.GetCurrentUserAsync();
	}

	private async Task Delete(Invoice invoice)
	{
		var ok = await Dialogs.Confirm("This will delete the invoice");
		if (!ok.HasValue || !ok.Value) return;

		using var db = DbFactory.CreateDbContext();
		await db.DeleteInvoiceAsync(invoice.Id);
		await DataChanged.InvokeAsync();
	}

	private async Task EnterPayment(Invoice invoice)
	{
		var response = await Dialogs.OpenAsync("Enter Payment", (ds) =>
			@<div>
				<div class="edit-form">
					<label>Invoice #:</label>
					<label>@invoice.Number - @invoice.Project.Customer.Name</label>

					<label>Balance Due:</label>
					<label>@invoice.BalanceDue.ToString("c2")</label>

					<label>Amount:</label>
					<RadzenNumeric @bind-Value="payment.Amount" Style="width:120px" />

					<label>Description:</label>
					<RadzenTextBox @bind-Value="payment.Data" Style="width:200px" />
				</div>

				<div class="d-flex justify-content-end mt-3">
					<RadzenButton Text="OK" Click="() => Dialogs.Close(true)" class="me-2" />
					<RadzenButton Text="Cancel" Click="() => Dialogs.Close(false)" ButtonStyle="ButtonStyle.Secondary" />
				</div>
			</div>
	);

		if (response is null) return;

		using var db = DbFactory.CreateDbContext();
		db.CurrentUser = user.UserName;

		payment.InvoiceId = invoice.Id;
		payment.IsManual = true;
		db.Payments.Add(payment);
		await db.SaveChangesAsync();
		await DataChanged.InvokeAsync();
		payment = new();
	}

}
